//Check Permutation: Given two strings, write a method to decide if one is a permutation of the other


import java.util.HashMap;
import java.util.Map;

public class StringPermutation {
	public static void main(String args[]) {

		String input1 = "god   ";
		String input2 = "Do   g";

		System.out.println("sortString  "
				+ sortString(input1.toLowerCase().replace(" ", ""), input2.toLowerCase().replace(" ", "")));
		System.out.println("countChar  "
				+ countChar(input1.toLowerCase().replace(" ", ""), input2.toLowerCase().replace(" ", "")));
		System.out.println(
				"hashChar  " + hashChar(input1.toLowerCase().replace(" ", ""), input2.toLowerCase().replace(" ", "")));

	}

	public static boolean sortString(String input1, String input2) {

		if (input1 == null || input2 == null)
			return false;
		if (input1.length() != input2.length())
			return false;
		return sort(input1).equals(sort(input2));

	}

	public static String sort(String x) {
		char[] input1char = x.toCharArray();
		java.util.Arrays.sort(input1char);
		return new String(input1char);

	}

	public static boolean countChar(String x1, String x2) {

		int[] countc = new int[128];
		for (char c : x1.toCharArray()) {
			countc[c]++;
		}

		char[] x2_char = x2.toCharArray();
		for (char c : x2_char) {
			countc[c]--;

			if (countc[c] < 0)
				return false;

		}
		return true;

	}

	public static boolean hashChar(String x1, String x2) {
		HashMap<Character, Integer> hash_x1 = new HashMap<>();

		for (int i = 0; i < x1.length(); i++) {
			Character c = x1.charAt(i);
			Character d = x2.charAt(i);

			if (hash_x1.containsKey(c)) {
				hash_x1.put(c, hash_x1.get(c) + 1);

			} else {
				hash_x1.put(c, 1);

			}

			if (hash_x1.containsKey(d)) {
				hash_x1.put(d, hash_x1.get(d) - 1);

			} else {
				hash_x1.put(d, -1);

			}

			if (hash_x1.get(d) == 0) {

				hash_x1.remove(d);

			}

		}

		for (Map.Entry<Character, Integer> entry : hash_x1.entrySet()) {
			if (entry.getValue() != 0)
				return false;
		}

		return true;
	}

}
